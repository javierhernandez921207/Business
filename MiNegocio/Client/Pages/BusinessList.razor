@page "/business"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MiNegocio.Shared
@using MiNegocio.Client.Component.Business
@using Service
@attribute [Authorize]
@inject HttpClient Http
@inject BusinessService businessesService
@inject DialogService DialogService
@implements IDisposable
<PageTitle>Business</PageTitle>

<RadzenRow>
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Text="Business" />
    </RadzenBreadCrumb>
</RadzenRow>
<hr />

<h3>My Business</h3>

@if (businesses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenRow>
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="New Business" Icon="add_circle_outline" Click="ShowDialogNewBusiness"></RadzenButton>
    </RadzenRow>
    <RadzenRow >
        @foreach (var bus in businesses)
        {
           <BusinessCard business="bus" DeleteBusiness="() => DeleteBusiness(bus)" EditBusiness="() => ShowDialogEditBusiness(bus)"></BusinessCard>
        }
    </RadzenRow>
}

@code {
    private Business[]? businesses;

    Business newBusiness = new Business();

    protected override async Task OnInitializedAsync()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
        try
        {            
            businesses = await businessesService.GetBusinessAsync();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public void Dispose()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Console.WriteLine("Dialog opened");
    }

    async void Close(dynamic result)
    {
        businesses = await businessesService.GetBusinessAsync();
        Console.WriteLine($"Dialog closed");
        StateHasChanged();
    }

    private async Task ShowDialogNewBusiness()
    {
        newBusiness.Products = new List<Product>();
        var result = await DialogService.OpenAsync("New Business", ds =>
    @<div>
        <div class="row">
            <div class="col">
                <BusinessForm business="newBusiness" OnSubmit="() => NewBusiness(newBusiness, ds)" OnCancel="() => ds.Close()"></BusinessForm>                
            </div>
        </div>
        </div>
    );
        Console.WriteLine($"Dialog result: {result}");
    }

    private async Task ShowDialogEditBusiness(Business b)
    {
        var result = await DialogService.OpenAsync("Edit Business", ds =>
        @<div>
            <div class="row">
                <div class="col">
                    <BusinessForm business="b" OnSubmit="() => {ds.Close(); EditBusiness(b);}" OnCancel="() => ds.Close()"></BusinessForm>
                </div>
            </div>
        </div>
        );
    }

    private async void NewBusiness(Business args, DialogService ds)
    {        
        var result = await businessesService.AddBusiness(args);
        newBusiness = new();
        businesses = await businessesService.GetBusinessAsync();
        ds.Close();
        StateHasChanged();
    }

    private async void EditBusiness(Business args)
    {
        var result = await businessesService.EditBusiness(args);        
        businesses = await businessesService.GetBusinessAsync();        
        StateHasChanged();
    }

    private async void DeleteBusiness(Business bus)
    {
        var result = await businessesService.DeleteBusiness(bus);
        if (result)
        {
            businesses = await businessesService.GetBusinessAsync();        
            StateHasChanged();            
        }
    }
}
